# Copyright 2023 The Bazel Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module(name = "toolchains_llvm_tests")

bazel_dep(name = "toolchains_llvm", version = "0.0.0")
local_path_override(
    module_name = "toolchains_llvm",
    path = "..",
)

bazel_dep(name = "bazel_skylib", version = "1.6.1")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_go", version = "0.47.1", repo_name = "io_bazel_rules_go")
bazel_dep(name = "rules_rust", version = "0.44.0")
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")
bazel_dep(name = "abseil-cpp", version = "20240116.2", repo_name = "com_google_absl")

# As a workaround for https://github.com/bazelbuild/rules_foreign_cc/issues/1018.
register_toolchains(
    "//:ninja_mac_arm64_toolchain",
)

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    name = "go_sdk",
    version = "1.21.0",
)
use_repo(go_sdk, "go_toolchains")

register_toolchains("@go_toolchains//:all")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2023")
use_repo(
    rust,
    "rust_toolchains",
)

register_toolchains("@rust_toolchains//:all")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")

# When updating this version, also update the versions associated with
# llvm_toolchain below, sys_paths_test in the workflows file, and xcompile_test
# through the `llvm_toolchain_with_sysroot` toolchain.
LLVM_VERSIONS = {
    "": "16.0.0",
    "darwin-aarch64": "16.0.5",
    "darwin-x86_64": "15.0.7",
}

llvm.toolchain(
    name = "llvm_toolchain",
    llvm_versions = LLVM_VERSIONS,
)
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

register_toolchains("@llvm_toolchain//:all")

# Example toolchain with user provided URLs.
# TODO(siddharthab): Add test.
llvm.toolchain(
    name = "llvm_toolchain_with_urls",
    llvm_versions = {
        "": "15.0.6",
        "darwin-aarch64": "15.0.7",
        "darwin-x86_64": "15.0.7",
    },
    sha256 = {
        "": "38bc7f5563642e73e69ac5626724e206d6d539fbef653541b34cae0ba9c3f036",
        "darwin-aarch64": "867c6afd41158c132ef05a8f1ddaecf476a26b91c85def8e124414f9a9ba188d",
        "darwin-x86_64": "d16b6d536364c5bec6583d12dd7e6cf841b9f508c4430d9ee886726bd9983f1c",
    },
    strip_prefix = {
        "": "clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04",
        "darwin-aarch64": "clang+llvm-15.0.7-arm64-apple-darwin22.0",
        "darwin-x86_64": "clang+llvm-15.0.7-x86_64-apple-darwin21.0",
    },
    urls = {
        "": ["https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04.tar.xz"],
        "darwin-aarch64": ["https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.7/clang+llvm-15.0.7-arm64-apple-darwin22.0.tar.xz"],
        "darwin-x86_64": ["https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.7/clang+llvm-15.0.7-x86_64-apple-darwin21.0.tar.xz"],
    },
)
use_repo(llvm, "llvm_toolchain_with_urls")

# This is the last known LLVM version with zlib support in ld.lld. Without zlib
# support, if the installed gcc toolchain has compressed sections in its object
# files, then ld.lld won't be able to process them. Example is archlinux docker
# image base-devel as of the time of this writing (23 May 2022).
llvm.toolchain(
    name = "llvm_toolchain_13_0_0",
    llvm_version = "13.0.0",
)
use_repo(llvm, "llvm_toolchain_13_0_0")

# Toolchain example with absolute paths; tested in GitHub CI.
llvm.toolchain(
    name = "llvm_toolchain_with_absolute_paths",
    absolute_paths = True,
    llvm_versions = LLVM_VERSIONS,
)
# We can share the downloaded LLVM distribution with the first configuration.
llvm.toolchain_root(
    name = "llvm_toolchain_with_absolute_paths",
    label = "@llvm_toolchain_llvm//:BUILD",
)
use_repo(llvm, "llvm_toolchain_with_absolute_paths")

# Toolchain example with system LLVM; tested in GitHub CI.
llvm.toolchain(
    name = "llvm_toolchain_with_system_llvm",
    llvm_versions = LLVM_VERSIONS,
)
# For this toolchain to work, the LLVM distribution archive would need to be unpacked here.
llvm.toolchain_root(
    name = "llvm_toolchain_with_system_llvm",
    path = "/opt/llvm-16",
)
use_repo(llvm, "llvm_toolchain_with_system_llvm")

# Toolchain example with a sysroot.
llvm.toolchain(
    name = "llvm_toolchain_with_sysroot",
    llvm_versions = LLVM_VERSIONS,
)
# We can share the downloaded LLVM distribution with the first configuration.
llvm.toolchain_root(
    name = "llvm_toolchain_with_sysroot",
    label = "@llvm_toolchain_llvm//:BUILD",
)
llvm.sysroot(
    name = "llvm_toolchain_with_sysroot",
    targets = ["linux-x86_64"],
    label = "@@org_chromium_sysroot_linux_x64//:sysroot",
)
use_repo(llvm, "llvm_toolchain_with_sysroot")

llvm.toolchain(
    name = "llvm_toolchain_linux_exec",
    llvm_version = "17.0.6",
    # Option 1:
    sha256 = {"": "884ee67d647d77e58740c1e645649e29ae9e8a6fe87c1376be0f3a30f3cc9ab3"},
    strip_prefix = {"": "clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04"},
    urls = {"": ["https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04.tar.xz"]},
    # Option 2:
    # distribution = "clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04.tar.xz",
    exec_os = "linux",
    exec_arch = "amd64",
)
use_repo(llvm, "llvm_toolchain_linux_exec")
